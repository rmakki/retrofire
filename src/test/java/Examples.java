import com.google.gson.Gson;
import model.*;
import service.RetrofireSvc;
import java.io.IOException;
import java.util.LinkedHashMap;

public class Examples {

    public static void main(String[] args) {

        // change to your firebase reference url
        String FIREBASE_REF = "https://smartplayTest.firebaseio.com/";

        // Create firebase service with Full logging. Make sure you set to false in production
        RetrofireSvc rfSvc = new RetrofireSvc(FIREBASE_REF, true);

        // examples

        try {
            // Delete
            // The example below Deletes the root (clears data from previous tests)
            rfSvc.delete("");

            // There are three ways you can pass data to PUT POST and PATCH requests:
            // 1- pass the path and an object (could be a class you have defined or a data structure)
            // 2- pass the path and a MAP object
            // 3- pass the path and raw json data

            // PUT request passing path and an object
            // Object to be passed
            UserDetails user1 = new UserDetails("uid1",100,150,70, "I love traveling and discovering new cultures");
            rfSvc.put("userDetails/uid1",user1);

            // PUT request passing raw json data
            // let's add another user
            String rawjson = "{\"userUID\":\"uid2\",\"nbFollowers\":\"4000\",\"nbFollowing\":\"1000\",\"nbPosts\":\"300\"}";
            rfSvc.put("userDetails/uid2",rawjson);

            // PATCH request passing a MAP
            // Let's add bio information to the user we just added (uid2)
            LinkedHashMap<String, Object> datamap = new LinkedHashMap<String, Object>();
            datamap.put("bio", "Musician/Band");
            rfSvc.patch("userDetails/uid2",datamap);


            // POST
            // User uid1 posts a photo, let's save the info
            datamap.clear();
            datamap.put("description","Enjoying this beautiful sunset, where are you traveling next?");
            datamap.put("imageLink","https://myclouddatastorage/image231");

            FirebaseResponse firebaseResponse = rfSvc.post("userPosts/uid1",datamap);

            // Firebase generates a unique ID for each post request and returns it in the response
            // Below is a sample code in case you need to retrieve this unique ID from the FirebaseResponse
            // body field - which will contain a json string in the form of {"name":"<firebase unique id>"}
            // ex: {"name":"-L8v6-NuOg_9W6feuE6y"}

            FirebaseUID newPostUID=null;

            if (firebaseResponse.isSuccess()) {
                Gson gson = new Gson();
                newPostUID = gson.fromJson(firebaseResponse.getBody(), FirebaseUID.class);
                System.out.println("Unique ID generated by firebase for this POST request : " + newPostUID.getName());
                // Sample output: Unique ID generated by firebase for this POST request : -LAxWJiULDcdcXZEq86I
            }

            // someone comments on the photo, let's save the comment under the node we just generated above
            datamap.clear();
            datamap.put("comment","Amazing shot!");
            rfSvc.post("userPosts/uid1/" + newPostUID.getName() + "/comments",datamap);


            // GET
            // Passing an empty string will retrieve all info under your firebase Root
            rfSvc.get("");

            // GET
            // Let's retrieve the bio of uid1
            UserDetails getUser;
            firebaseResponse = rfSvc.get("userDetails/uid1/");

            if (firebaseResponse.isSuccess()) {
                // Check if information found (firebase returns success with null body if path not found)
                if (!firebaseResponse.getBody().equals("null")) {
                    Gson gson = new Gson();
                    getUser = gson.fromJson(firebaseResponse.getBody(), UserDetails.class);
                    System.out.println("uid1 Bio : " + getUser.getBio());
                    // Sample output: uid1 Bio : I love travel and discovering new cultures


                } else {
                    System.out.println("GET path not found");
                }
            }

            // GET with query parameters
            // Let's retrieve users with nb_followers equal or greater than 500
            rfSvc.addQueryParam("orderBy", "\"nbFollowers\"");
            rfSvc.addQueryParam("startAt","500");
            firebaseResponse = rfSvc.get("userDetails");
            System.out.println("Users with at least 500 followers: " + firebaseResponse.toString());
            // Sample output
            // Users with at least 500 followers: FirebaseResponse{success=true, code=200, message=OK, body='{"uid2":{"bio":"Musician/Band","nbFollowers":"4000","nbFollowing":"1000","nbPosts":"300","userUID":"uid2"}}'}


            // Asynchronous GET method call

            NetworkRequestListener networkRequestListener = new NetworkRequestListener<FirebaseResponse>() {
                @Override
                public void onExecuted(FirebaseResponse firebaseResponse) {

                    // Request Executed
                    if (firebaseResponse.isSuccess()) {
                        System.out.println("Users with at least 500 followers ASYNC: " + firebaseResponse.toString());
                    } else
                        System.out.print("Firebase returned an error ASYNC: " + firebaseResponse.getMessage());

                }

                @Override
                public void onFailure(Throwable t) {
                    // Network request failed
                    System.out.print("Retrofit ASYNC network call failed " + t.getMessage());
                }

            };

            rfSvc.getAsync("userDetails", networkRequestListener);

        }

        catch (IOException e) { // Network error (for example timeouts)
            System.out.println("Network error " + e );

        }
        catch (Exception e) { // Unexpected/parse error (thrown by Retrofit for example if you pass null data to PATCH)
            System.out.println("Unexpected/parse error " + e );

        }

    }

}
